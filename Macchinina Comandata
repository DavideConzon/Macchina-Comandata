#include <WiFiS3.h>
#include <WiFi.h>
#include <WiFiServer.h>
#include <WiFiUdp.h>
#include <WiFiClient.h>
#include "thingProperties.h"
#include <Servo.h>

char ssid[] = "iPhone Eavi";// INSERIMENTO SSID PER COLLEGARE ALLA RETE
char password[] = "ERR83NTRXCd"; // INSERIMENTO ELLA PASSWORD PER CONNESSIONE

int ledPin = LED_BUILTIN;  // Utilizza il LED built-in della scheda come indicatore visivo
const int iN1 = 9;
const int iN2 = 8;  //inizializzo variabile pin del L298n
const int EN_pin = 10;
Servo myservo;
const int servoPin = 5; //inizializzo pin per servo
const int pos = 90; //imposto posizione di partenza 90Â°
int cambio = 0;
int fari = 2;
int photoPin = A0;
int sensorValue;
int mappedValue;
int frecciaSx = 3;
int frecciaDx = 4;

WiFiServer server(30000);

void setup()
{
  Serial.begin(115200);
  pinMode(iN1, OUTPUT);
  pinMode(iN2, OUTPUT);
  pinMode(EN_pin, OUTPUT);
  myservo.attach(servoPin);
  myservo.write(pos);
  pinMode(fari, OUTPUT);
  pinMode(frecciaSx, OUTPUT);
  pinMode(frecciaDx, OUTPUT);

  Serial.println();
  Serial.println("Connessione al Wifi...");
  WiFi.begin(ssid, password);
  int attempts = 0;

  while (WiFi.status() != WL_CONNECTED && attempts < 10)
  {
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("Connessione al Wifi non riuscita");
    while (true)
    {
      delay(1000);
    }
  }

  Serial.println("Connesso al Wifi");
  Serial.print("Indirizzo IP: ");
  Serial.println(WiFi.localIP());

  server.begin();

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  //CODICE SERIALE DI ARDUINO PER ASSOCIAZIONE
  ArduinoCloud.setThingId("b3b27576-b1b5-47d5-afbb-7ddd51853ab2");

  //INIZIALIZZA VARIABILE CLOUD
  ArduinoCloud.addProperty(avanti, READWRITE, ON_CHANGE, onAvantiChange);
  ArduinoCloud.addProperty(indietro, READWRITE, ON_CHANGE, onIndietroChange);
  ArduinoCloud.addProperty(avSinistra, READWRITE, ON_CHANGE, onAvSinistraChange);
  ArduinoCloud.addProperty(avDestra, READWRITE, ON_CHANGE, onAvDestraChange);
  ArduinoCloud.addProperty(avantiIndietro, READWRITE, ON_CHANGE, onAvantiIndietroChange);

}

void loop()
{
  ArduinoCloud.update();
  luminosita();
}

//FUNZIONE PER ANDARE AVANTI
void onAvantiChange()
{
  if (avanti && cambio == 1) // va indietro dritto
  {
    digitalWrite(iN1, HIGH);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 255);
  }
  else if (avanti && cambio == 0) // va avanti dritto
  {
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, HIGH);
    analogWrite(EN_pin, 255);
  }
  else
  {
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 0);
  }
}

//FUNZIONE PER ANDARE NDIETRO
void onIndietroChange()
{
  if (indietro)
  {
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, HIGH);
    analogWrite(EN_pin, 255);
  }
  else
  {
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 0);
  }

}


//FUNZIONE PER GIRARE A DESTRA
void onAvDestraChange()
{
  if (avDestra && cambio == 1) // va indietro a destra
  {
    myservo.write(40);
    digitalWrite(iN1, HIGH);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 255);
  }
  else if (avDestra && cambio == 0) // va avanti a destra
  {
    digitalWrite(frecciaDx, HIGH); // accendo freccia quando giro
    
    myservo.write(40);
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, HIGH);
    analogWrite(EN_pin, 255);
  }
  else
  {
    digitalWrite(frecciaDx, LOW); // spengo freccia quando smetto di girare
    
    myservo.write(pos);
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 0);
  }
}


void onAvSinistraChange()
{
  if (avSinistra && cambio == 1) // va indietro a sinistra
  {
    myservo.write(140);
    digitalWrite(iN1, HIGH);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 255);
  }
  else if (avSinistra && cambio == 0) // va avanti a sinistra
  {
    digitalWrite(frecciaSx, HIGH); // accendo freccia quando giro
    
    myservo.write(140);
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, HIGH);
    analogWrite(EN_pin, 255);
  }
  else
  {
    digitalWrite(frecciaSx, LOW); // spegno freccia quando smetto di girare
    
    myservo.write(pos);
    digitalWrite(iN1, LOW);
    digitalWrite(iN2, LOW);
    analogWrite(EN_pin, 0);
  }
}

void onAvantiIndietroChange()
{
  if (avantiIndietro == false)
  {
    cambio = 0;
  }
  else if (avantiIndietro == true)
  {
    cambio = 1;
  }
}

void luminosita()
{
  sensorValue = analogRead(photoPin); //lettura del valore analogico della luce
  mappedValue = map(sensorValue, 0, 1023, 0, 100); // conversione da valore analogico a digitale

  if (mappedValue < 60)
  {
    digitalWrite(fari, HIGH);
  }
  else if (mappedValue >= 60)
  {
    digitalWrite(fari, LOW);
  }
}
